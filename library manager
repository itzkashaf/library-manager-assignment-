# library-manager-assignment-
assignment 
import streamlit as st
import sqlite3

# Database setup
def init_db():
    conn = sqlite3.connect("library.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS books
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, author TEXT, year INTEGER, genre TEXT)''')
    conn.commit()
    conn.close()

# Add a book
def add_book(title, author, year, genre):
    conn = sqlite3.connect("library.db")
    c = conn.cursor()
    c.execute("INSERT INTO books (title, author, year, genre) VALUES (?, ?, ?, ?)", (title, author, year, genre))
    conn.commit()
    conn.close()

# Get all books
def get_books():
    conn = sqlite3.connect("library.db")
    c = conn.cursor()
    c.execute("SELECT * FROM books")
    books = c.fetchall()
    conn.close()
    return books

# Update a book
def update_book(book_id, title, author, year, genre):
    conn = sqlite3.connect("library.db")
    c = conn.cursor()
    c.execute("UPDATE books SET title = ?, author = ?, year = ?, genre = ? WHERE id = ?", (title, author, year, genre, book_id))
    conn.commit()
    conn.close()

# Delete a book
def delete_book(book_id):
    conn = sqlite3.connect("library.db")
    c = conn.cursor()
    c.execute("DELETE FROM books WHERE id = ?", (book_id,))
    conn.commit()
    conn.close()

# Initialize database
init_db()

# Streamlit UI
st.title("ðŸ“š Personal Library Manager")

# Sidebar menu
menu = ["Add Book", "View Library", "Update Book", "Delete Book"]
choice = st.sidebar.selectbox("Menu", menu)

if choice == "Add Book":
    st.subheader("Add a New Book")
    title = st.text_input("Title")
    author = st.text_input("Author")
    year = st.number_input("Year", min_value=0, max_value=2100, step=1)
    genre = st.text_input("Genre")
    
    if st.button("Add Book"):
        add_book(title, author, year, genre)
        st.success(f"Added '{title}' to your library!")

elif choice == "View Library":
    st.subheader("Your Book Collection")
    books = get_books()
    for book in books:
        st.write(f"ðŸ“– {book[1]} by {book[2]} ({book[3]}, {book[4]})")

elif choice == "Update Book":
    st.subheader("Update Book Details")
    books = get_books()
    book_dict = {book[1]: book[0] for book in books}
    selected_title = st.selectbox("Select a book to update", list(book_dict.keys()))
    if selected_title:
        book_id = book_dict[selected_title]
        title = st.text_input("New Title", selected_title)
        author = st.text_input("New Author")
        year = st.number_input("New Year", min_value=0, max_value=2100, step=1)
        genre = st.text_input("New Genre")
        
        if st.button("Update Book"):
            update_book(book_id, title, author, year, genre)
            st.success("Book updated successfully!")

elif choice == "Delete Book":
    st.subheader("Remove a Book")
    books = get_books()
    book_dict = {book[1]: book[0] for book in books}
    selected_title = st.selectbox("Select a book to delete", list(book_dict.keys()))
    if selected_title:
        book_id = book_dict[selected_title]
        if st.button("Delete Book"):
            delete_book(book_id)
            st.success(f"Deleted '{selected_title}' from your library!")
